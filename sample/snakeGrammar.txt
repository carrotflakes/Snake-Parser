{
  arrayToObject: function($) {
    var res = {};
    for (var i = 0, il = $.length; i < il; ++i)
      res[$[i].symbol] = $[i].body;
    return res;
  },
  omit: function($) {
    if ($.arg.length === 1)
      return $.arg[0];
    return $;
  },
  eval: function($) {
    return eval($);
  },
  characterClassChar: function($) {
    var str = $,
    len = str.length;
    if (len === 1) {
      return str.charCodeAt();
    } else if (len === 6) {
      return parseInt(str.substring(2), 16);
    } else if (str === "\\n"){
      return 10;
    } else if (str === "\\t"){
      return 9;
    } else if (str === "\\r"){
      return 13;
    }
    return str.charCodeAt(1);
  },
  nuturalNumber: function($) {
    return parseInt($);
  }
}



start
  = {__ ?(initializer:CodeBlock __) rules:@*Rule>arrayToObject}

Rule
  = {symbol:Identifier __ '=' __ body:ChoiceExpression} __

ChoiceExpression
  = {op:\'|' arg:@(SequenceExpression __ *('|' __ SequenceExpression))}>omit __

SequenceExpression
  = {op:\' ' arg:@(LabelExpression *(__ LabelExpression))}>omit __

LabelExpression
  = {op:\':=' arg0:IdentifierOrStringLiteral __ ':=' __ arg1:IdentifierOrStringLiteral}
  | {op:\':' arg0:IdentifierOrStringLiteral __ ':' __ arg1:ModifyExpression}
  | ModifyExpression

ModifyExpression
  = {op:\'>' arg0:ModifyExpression __ '>' __ (arg1:Identifier | arg2:CodeBlock)}
  | OtherExpression

OtherExpression
  = '(' __ ChoiceExpression __ ')'
  | {op:\'\'' arg:StringLiteral
  | op:\'[^' '[^' arg:CharacterClass ']'
  | op:\'[' '[' arg:CharacterClass ']'
  | op:\'\\' '\\' __ arg:(StringLiteral | NumericLiteral | BooleanLiteral | NullLiteral)
  | op:\'@' '@' __ arg:OtherExpression
  | op:\'#' '{' __ arg:ChoiceExpression __ '}'
  | op:\'`' '`' __ arg:OtherExpression
  | op:\'&' '&' __ arg:OtherExpression
  | op:\'!' '!' __ arg:OtherExpression
  | op:\'?' '?' __ arg:OtherExpression
  | op:\'*' '*' __ arg:OtherExpression
  | op:\'n' n:NaturalNumber __ '*' __ arg:OtherExpression
  | op:\'n-m' n:?NaturalNumber > {return $ || 0} ',' m:?NaturalNumber > {return $ || Infinity} __ '*' __ arg:OtherExpression
  | op:\'+' '+' __ arg:OtherExpression
  | op:\'.' '.'
  | op:\'$' arg:Identifier !(__ '=')}

__
  = ?+([ \t\r\n] | Comment)

Comment
  = '//' *[^\n] ('\n' | !.) | '/*' *([^*] | '*' [^/]) '*/'

Identifier
  = `([a-zA-Z_] *[a-zA-Z0-9_])

IdentifierOrStringLiteral
  = StringLiteral | Identifier

StringLiteral
  = `(
    ('\'' *(+[^'\\] | '\\u' 4*[0-9a-fA-F] | '\\' [^u]) '\'') |
    ('\"' *(+[^"\\] | '\\u' 4*[0-9a-fA-F] | '\\' [^u]) '\"') ) > eval

CharacterClass
  = @*{type:\"range" start:CharacterClassChar '-' end:CharacterClassChar | type:\"single" char:CharacterClassChar}

CharacterClassChar
  = `([^\]\\]
  | '\\u' 4*[0-9a-fA-F]
  | '\\' [^u]) > characterClassChar

CodeBlock
  = "{" Code "}"

Code
  = `*(+(![{}] .) | "{" Code "}")

NaturalNumber
  = `([1-9] *[0-9] | '0') > nuturalNumber


NullLiteral
  = `"null" > eval

BooleanLiteral
  = `("true" | "false") > eval

NumericLiteral
  = `(?"-" (HexIntegerLiteral | DecimalLiteral)) > eval

DecimalLiteral
  = DecimalIntegerLiteral "." *DecimalDigit ?ExponentPart
  | "." +DecimalDigit ?ExponentPart
  | DecimalIntegerLiteral ?ExponentPart

DecimalIntegerLiteral
  = "0"
  | NonZeroDigit *DecimalDigit

DecimalDigit
  = [0-9]

NonZeroDigit
  = [1-9]

ExponentPart
  = ExponentIndicator SignedInteger

ExponentIndicator
  = "e" | "E"

SignedInteger
  = ?[+-] +DecimalDigit

HexIntegerLiteral
  = ("0x" | "0X") +HexDigit

HexDigit
  = [0-9a-fA-F]
